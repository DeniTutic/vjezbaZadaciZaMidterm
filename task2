package org.example;
import java.util.*;

enum CuisineType {
    ITALIAN,
    CHINESE,
    MEXICAN,
    INDIAN,
    FRENCH
}

interface Billable {
    double applyDiscount(double discountRate);
    String getDescription();
}

abstract class MenuItem implements Billable {
    private String code;
    private String name;
    private double price;

    public MenuItem(String code, String name, double price) {
        this.code = code;
        this.name = name;
        this.price = price;
    }

    @Override
    public double applyDiscount(double discountRate) {
        return price - (price * discountRate);
    }

    @Override
    public String getDescription() {
        return "Code: " + code + ", Name: " + name + ", Price: " + price;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}

class Dish extends MenuItem {
    private CuisineType cuisineType;
    private String mainIngredient;

    public Dish(String code, String name, double price, CuisineType cuisineType, String mainIngredient) {
        super(code, name, price);
        this.cuisineType = cuisineType;
        this.mainIngredient = mainIngredient;
    }

    @Override
    public String getDescription() {
        return super.getDescription() + ", Cuisine: " + cuisineType + ", Main Ingredient: " + mainIngredient;
    }

    public CuisineType getCuisineType() {
        return cuisineType;
    }

    public void setCuisineType(CuisineType cuisineType) {
        this.cuisineType = cuisineType;
    }

    public String getMainIngredient() {
        return mainIngredient;
    }

    public void setMainIngredient(String mainIngredient) {
        this.mainIngredient = mainIngredient;
    }
}

class Drink extends MenuItem {
    private double volume;

    public Drink(String code, String name, double price, double volume) {
        super(code, name, price);
        this.volume = volume;
    }

    @Override
    public String getDescription() {
        return super.getDescription() + ", Volume: " + volume + "ml";
    }

    public double getVolume() {
        return volume;
    }

    public void setVolume(double volume) {
        this.volume = volume;
    }
}

class TableReservation<T extends MenuItem & Billable> {
    private String reservationId;
    private Date reservationDate;
    private HashMap<T, Integer> orderedItems = new HashMap<>();
    private int tableNumber;

    public TableReservation(String reservationId, Date reservationDate, int tableNumber) {
        this.reservationId = reservationId;
        this.reservationDate = reservationDate;
        this.tableNumber = tableNumber;
    }

    public void addItemToOrder(T item, int quantity) {
        orderedItems.put(item, orderedItems.getOrDefault(item, 0) + quantity);
    }

    public double calculateTotalAmount() {
        double total = 0;
        for (Map.Entry<T, Integer> entry : orderedItems.entrySet()) {
            total += entry.getKey().getPrice() * entry.getValue();
        }
        return total;
    }

    public String getReservationId() {
        return reservationId;
    }

    public void setReservationId(String reservationId) {
        this.reservationId = reservationId;
    }

    public Date getReservationDate() {
        return reservationDate;
    }

    public void setReservationDate(Date reservationDate) {
        this.reservationDate = reservationDate;
    }

    public HashMap<T, Integer> getOrderedItems() {
        return orderedItems;
    }

    public int getTableNumber() {
        return tableNumber;
    }

    public void setTableNumber(int tableNumber) {
        this.tableNumber = tableNumber;
    }
}

class Customer {
    private String customerId;
    private String name;
    private String phoneNumber;
    private List<TableReservation<? extends MenuItem>> reservations = new ArrayList<>();

    public Customer(String customerId, String name, String phoneNumber) {
        this.customerId = customerId;
        this.name = name;
        this.phoneNumber = phoneNumber;
    }

    public void addReservation(TableReservation<? extends MenuItem> reservation) {
        reservations.add(reservation);
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public List<TableReservation<? extends MenuItem>> getReservations() {
        return reservations;
    }
}

class Restaurant {
    private String restaurantName;
    private List<Customer> customers = new ArrayList<>();
    private Map<String, MenuItem> menuItems = new HashMap<>();

    public Restaurant(String restaurantName) {
        this.restaurantName = restaurantName;
    }

    public void addCustomer(Customer customer) {
        customers.add(customer);
    }

    public void addMenuItem(MenuItem item) {
        menuItems.put(item.getCode(), item);
    }

    public Customer getCustomer(String customerId) {
        for (Customer customer : customers) {
            if (customer.getCustomerId().equals(customerId)) {
                return customer;
            }
        }
        return null;
    }

    public void displayMenu() {
        for (MenuItem item : menuItems.values()) {
            System.out.println(item.getDescription());
        }
    }

    public double calculateTotalSales() {
        double totalSales = 0;
        for (Customer customer : customers) {
            for (TableReservation<? extends MenuItem> reservation : customer.getReservations()) {
                totalSales += reservation.calculateTotalAmount();
            }
        }
        return totalSales;
    }
}

public class MainApplication {
    public static void main(String[] args) {
        Dish dish1 = new Dish("D001", "Spaghetti Carbonara", 12.5, CuisineType.ITALIAN, "Pasta");
        Dish dish2 = new Dish("D002", "Kung Pao Chicken", 10.0, CuisineType.CHINESE, "Chicken");

        Drink drink1 = new Drink("DR001", "Coca-Cola", 2.5, 500);
        Drink drink2 = new Drink("DR002", "Orange Juice", 3.0, 300);

        Restaurant restaurant = new Restaurant("Gourmet Bistro");
        restaurant.addMenuItem(dish1);
        restaurant.addMenuItem(dish2);
        restaurant.addMenuItem(drink1);
        restaurant.addMenuItem(drink2);

        TableReservation<Dish> dishReservation = new TableReservation<>("R001", new Date(), 1);
        dishReservation.addItemToOrder(dish1, 2);
        dishReservation.addItemToOrder(dish2, 1);

        TableReservation<Drink> drinkReservation = new TableReservation<>("R002", new Date(), 2);
        drinkReservation.addItemToOrder(drink1, 3);
        drinkReservation.addItemToOrder(drink2, 2);

        Customer customer = new Customer("C001", "Alice", "123-456-7890");
        customer.addReservation(dishReservation);
        customer.addReservation(drinkReservation);

        restaurant.addCustomer(customer);

        restaurant.displayMenu();
        System.out.println("Total Sales: " + restaurant.calculateTotalSales());
    }
}
